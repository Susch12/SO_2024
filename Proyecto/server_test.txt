#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <time.h>
#include <unistd.h>
#include <arpa/inet.h>
#include <pthread.h>
#include <signal.h>

#define MAX_USERS 20
#define MAX_EXAMS 3
#define MAX_QUESTIONS 10
#define TOTAL_QUESTIONS 60
#define PORT 8080

typedef struct {
    char matricula[10];
    char password[10];
} User;

typedef struct {
    char question[256];
    char options[3][256];
    int correct_option;
} Question;

typedef struct {
    Question questions[MAX_QUESTIONS];
    int question_count;
} Exam;

typedef struct {
    char matricula[10];
    int scores[MAX_EXAMS];
} Result;

User users[MAX_USERS];
Exam exams[MAX_EXAMS];
Result results[MAX_USERS];
int result_count = 0;
Question question_bank[TOTAL_QUESTIONS];

void load_users();
int authenticate(char *matricula, char *password);
void load_exam(const char *filename, Exam *exam);
void load_exams();
void generate_random_exam(Exam *exam);
void add_result(const char *matricula, int scores[]);
void show_results();
void *handle_client(void *client_socket);

void load_users() {
    FILE *file = fopen("usuarios.txt", "r");
    if (file == NULL) {
        perror("Error al abrir el archivo de usuarios");
        exit(EXIT_FAILURE);
    }

    char line[256];
    int i = 0;
    while (fgets(line, sizeof(line), file) && i < MAX_USERS) {
        char *token = strtok(line, ",");
        if (token != NULL) {
            strncpy(users[i].matricula, token, sizeof(users[i].matricula) - 1);
            token = strtok(NULL, "\n");
            if (token != NULL) {
                strncpy(users[i].password, token, sizeof(users[i].password) - 1);
            }
        }
        i++;
    }

    fclose(file);
}

int authenticate(char *matricula, char *password) {
    for (int i = 0; i < MAX_USERS; i++) {
        if (strcmp(users[i].matricula, matricula) == 0 && strcmp(users[i].password, password) == 0) {
            return 1;
        }
    }
    return 0;
}

void load_exam(const char *filename, Exam *exam) {
    FILE *file = fopen(filename, "r");
    if (!file) {
        perror("Error al abrir el archivo de preguntas");
        exit(EXIT_FAILURE);
    }

    char line[256];
    int i = 0;

    while (fgets(line, sizeof(line), file) && i < MAX_QUESTIONS) {
        // Eliminar salto de línea al final de la línea
        line[strcspn(line, "\n")] = 0;

        // Ignorar la categoría
        char *token = strtok(line, "|");
        if (token == NULL) {
            fprintf(stderr, "Error: Fila mal formateada, falta la categoría.\n");
            continue;
        }

        // Extraer la pregunta
        token = strtok(NULL, "|");
        if (token != NULL) {
            strncpy(exam->questions[i].question, token, sizeof(exam->questions[i].question) - 1);
            exam->questions[i].question[sizeof(exam->questions[i].question) - 1] = '\0';
        } else {
            fprintf(stderr, "Error: Fila mal formateada, falta la pregunta en la línea %d.\n", i + 1);
            continue;
        }

        // Extraer las opciones
        for (int j = 0; j < 3; j++) {
            token = strtok(NULL, "|");
            if (token != NULL) {
                strncpy(exam->questions[i].options[j], token, sizeof(exam->questions[i].options[j]) - 1);
                exam->questions[i].options[j][sizeof(exam->questions[i].options[j]) - 1] = '\0';
            } else {
                fprintf(stderr, "Error: Fila mal formateada, falta la opción %d en la línea %d.\n", j + 1, i + 1);
                continue;
            }
        }

        // Extraer la respuesta correcta
        token = strtok(NULL, "|");
        if (token != NULL) {
            exam->questions[i].correct_option = token[0] - 'a' + 1; // Convertir 'a', 'b', 'c' a 1, 2, 3
        } else {
            fprintf(stderr, "Error: Fila mal formateada, falta la respuesta correcta en la línea %d.\n", i + 1);
            continue;
        }

        i++;
    }
    exam->question_count = i;

    fclose(file);
}

void load_exams() {
    load_exam("mate.txt", &exams[0]);
    load_exam("español.txt", &exams[1]);
    load_exam("ingles.txt", &exams[2]);
}

void generate_random_exam(Exam *exam) {
    int indices[TOTAL_QUESTIONS];
    for (int i = 0; i < TOTAL_QUESTIONS; i++) {
        indices[i] = i;
    }

    // Mezclar los índices
    for (int i = 0; i < TOTAL_QUESTIONS; i++) {
        int j = rand() % TOTAL_QUESTIONS;
        int temp = indices[i];
        indices[i] = indices[j];
        indices[j] = temp;
    }

    // Seleccionar las primeras 10 preguntas aleatorias
    for (int i = 0; i < MAX_QUESTIONS; i++) {
        exam->questions[i] = question_bank[indices[i]];
    }
    exam->question_count = MAX_QUESTIONS;
}

void add_result(const char *matricula, int scores[]) {
    for (int i = 0; i < result_count; i++) {
        if (strcmp(results[i].matricula, matricula) == 0) {
            for (int j = 0; j < MAX_EXAMS; j++) {
                results[i].scores[j] = scores[j];
            }
            return;
        }
    }

    if (result_count < MAX_USERS) {
        strncpy(results[result_count].matricula, matricula, sizeof(results[result_count].matricula) - 1);
        for (int i = 0; i < MAX_EXAMS; i++) {
            results[result_count].scores[i] = scores[i];
        }
        result_count++;
    }

    if (result_count == 3) {
        show_results();
    }
}

void show_results() {
    printf("Resultados de los 3 usuarios:\n");
    for (int i = 0; i < 3; i++) {
        printf("Usuario %s:\n", results[i].matricula);
        for (int j = 0; j < MAX_EXAMS; j++) {
            printf("Examen %d: %d\n", j + 1, results[i].scores[j]);
        }
    }
}

void *handle_client(void *client_socket) {
    int socket = *(int *)client_socket;
    free(client_socket);

    char buffer[1024];
    int n;

    // Recibir matrícula y contraseña
    printf("Esperando matrícula y contraseña del cliente...\n");
    n = read(socket, buffer, sizeof(buffer) - 1);
    if (n < 0) {
        perror("Error leyendo del socket");
        close(socket);
        return NULL;
    }
    buffer[n] = '\0';
    printf("Datos recibidos: %s\n", buffer);

    char *matricula = strtok(buffer, ",");
    char *password = strtok(NULL, ",");

    printf("Matrícula recibida: %s\n", matricula);
    printf("Contraseña recibida: %s\n", password);

    if (authenticate(matricula, password)) {
        printf("Autenticación exitosa para matrícula: %s\n", matricula);
        write(socket, "Autenticación exitosa\n", 22);

        int scores[MAX_EXAMS] = {0};
        for (int i = 0; i < MAX_EXAMS; i++) {
            // Leer solicitud de examen
            n = read(socket, buffer, sizeof(buffer) - 1);
            if (n < 0) {
                perror("Error leyendo del socket");
                close(socket);
                return NULL;
            }
            buffer[n] = '\0';
            printf("Solicitud de examen recibida: %s\n", buffer);

            // Enviar preguntas del examen solicitado
            Exam *exam = NULL;
            if (strcmp(buffer, "Matemáticas") == 0) {
                exam = &exams[0];
            } else if (strcmp(buffer, "Español") == 0) {
                exam = &exams[1];
            } else if (strcmp(buffer, "Inglés") == 0) {
                exam = &exams[2];
            }

            if (exam != NULL) {
                printf("Enviando preguntas del examen: %s\n", buffer);
                int score = 0;
                for (int j = 0; j < exam->question_count; j++) {
                    printf("Enviando pregunta %d: %s\n", j + 1, exam->questions[j].question);
                    for (int k = 0; k < 3; k++) {
                        printf("Enviando opción %c: %s\n", 'A' + k, exam->questions[j].options[k]);
                    }
                    printf("Opción correcta: %c\n", exam->questions[j].correct_option);

                    // Leer respuesta del usuario
                    n = read(socket, buffer, sizeof(buffer) - 1);
                    if (n < 0) {
                        perror("Error leyendo la respuesta del cliente");
                        close(socket);
                        return NULL;
                    }
                    buffer[n] = '\0';
                    printf("Respuesta recibida: %s\n", buffer);

                    if (atoi(buffer) == exam->questions[j].correct_option) {
                        printf("Respuesta correcta para pregunta %d\n", j + 1);
                        score++;
                    } else {
                        printf("Respuesta incorrecta para pregunta %d\n", j + 1);
                    }
                }
                printf("Examen completado. Puntaje: %d/%d\n", score, exam->question_count);
                scores[i] = score;
            } else {
                printf("Examen solicitado no válido: %s\n", buffer);
            }
        }
        printf("Guardando resultados para matrícula: %s\n", matricula);
        add_result(matricula, scores);
        printf("Resultados guardados exitosamente para matrícula: %s\n", matricula);
    } else {
        printf("Autenticación fallida para matrícula: %s\n", matricula);
        write(socket, "Autenticación fallida\n", 22);
    }

    close(socket);
    return NULL;
}

int main() {
    int server_socket, *client_socket;
    struct sockaddr_in server_addr, client_addr;
    socklen_t client_len;
    pthread_t thread_id;

    srand(time(NULL)); // Inicializar la semilla para la generación aleatoria
    load_users();
    load_exams();

    // Crear el socket del servidor
    server_socket = socket(AF_INET, SOCK_STREAM, 0);
    if (server_socket < 0) {
        perror("Error abriendo el socket");
        exit(EXIT_FAILURE);
    }
    signal(SIGPIPE, SIG_IGN);
    // Configurar la dirección del servidor
    memset(&server_addr, 0, sizeof(server_addr));
    server_addr.sin_family = AF_INET;    // Configurar la dirección del servidor
    memset(&server_addr, 0, sizeof(server_addr));
    server_addr.sin_family = AF_INET;
    server_addr.sin_addr.s_addr = INADDR_ANY;
    server_addr.sin_port = htons(PORT);

    // Enlazar el socket a la dirección del servidor
    if (bind(server_socket, (struct sockaddr *)&server_addr, sizeof(server_addr)) < 0) {
        perror("Error en el bind");
        close(server_socket);
        exit(EXIT_FAILURE);
    }

    // Escuchar conexiones entrantes
    listen(server_socket, 5);
    printf("Servidor escuchando en el puerto %d\n", PORT);

    while (1) {
        client_len = sizeof(client_addr);
        client_socket = malloc(sizeof(int));
        *client_socket = accept(server_socket, (struct sockaddr *)&client_addr, &client_len);
        if (*client_socket < 0) {
            perror("Error en el accept");
            free(client_socket);
            continue;
        }

        // Crear un nuevo hilo para manejar el cliente
        if (pthread_create(&thread_id, NULL, handle_client, (void *)client_socket) != 0) {
            perror("Error creando el hilo");
            free(client_socket);
        } else {
            pthread_detach(thread_id); // Separar el hilo para que se limpie automáticamente al terminar
        }
    }
    close(server_socket);
    return 0;
}
